{"version":3,"sources":["app.js"],"names":["_setImmediate2","require","_setImmediate3","_interopRequireDefault","_express","_express2","_mongoose","_mongoose2","_environment","_environment2","_http","_http2","obj","__esModule","default","Promise","connect","connection","on","err","console","error","process","exit","seedDB","app","server","createServer","socketio","serveClient","env","path","startServer","angularFullstack","listen","port","ip","log","get","exports","module"],"mappings":"AAAA;;;;AAIA;;AAEA,IAAIA,iBAAiBC,QAAQ,qCAAR,CAArB;;AAEA,IAAIC,iBAAiBC,uBAAuBH,cAAvB,CAArB;;AAEA,IAAII,WAAWH,QAAQ,SAAR,CAAf;;AAEA,IAAII,YAAYF,uBAAuBC,QAAvB,CAAhB;;AAEA,IAAIE,YAAYL,QAAQ,UAAR,CAAhB;;AAEA,IAAIM,aAAaJ,uBAAuBG,SAAvB,CAAjB;;AAEA,IAAIE,eAAeP,QAAQ,sBAAR,CAAnB;;AAEA,IAAIQ,gBAAgBN,uBAAuBK,YAAvB,CAApB;;AAEA,IAAIE,QAAQT,QAAQ,MAAR,CAAZ;;AAEA,IAAIU,SAASR,uBAAuBO,KAAvB,CAAb;;AAEA,SAASP,sBAAT,CAAgCS,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/FL,WAAWO,OAAX,CAAmBC,OAAnB,GAA6Bd,QAAQ,UAAR,CAA7B;;AAGA;AACAM,WAAWO,OAAX,CAAmBE,OAAnB,CAA2B,iEAA3B;AACAT,WAAWO,OAAX,CAAmBG,UAAnB,CAA8BC,EAA9B,CAAiC,OAAjC,EAA0C,UAAUC,GAAV,EAAe;AACvDC,UAAQC,KAAR,CAAc,+BAA+BF,GAA7C;AACAG,UAAQC,IAAR,CAAa,CAAC,CAAd;AACD,CAHD;;AAKA;AACA,IAAId,cAAcK,OAAd,CAAsBU,MAA1B,EAAkC;AAChCvB,UAAQ,eAAR;AACD;;AAED;AACA,IAAIwB,MAAM,CAAC,GAAGpB,UAAUS,OAAd,GAAV;AACA,IAAIY,SAASf,OAAOG,OAAP,CAAea,YAAf,CAA4BF,GAA5B,CAAb;AACA,IAAIG,WAAW3B,QAAQ,WAAR,EAAqByB,MAArB,EAA6B;AAC1CG,eAAapB,cAAcK,OAAd,CAAsBgB,GAAtB,KAA8B,YADD;AAE1CC,QAAM;AAFoC,CAA7B,CAAf;AAIA9B,QAAQ,mBAAR,EAA6Ba,OAA7B,CAAqCc,QAArC;AACA3B,QAAQ,kBAAR,EAA4Ba,OAA5B,CAAoCW,GAApC;AACAxB,QAAQ,UAAR,EAAoBa,OAApB,CAA4BW,GAA5B;;AAEA;AACA,SAASO,WAAT,GAAuB;AACrBP,MAAIQ,gBAAJ,GAAuBP,OAAOQ,MAAP,CAAczB,cAAcK,OAAd,CAAsBqB,IAApC,EAA0C1B,cAAcK,OAAd,CAAsBsB,EAAhE,EAAoE,YAAY;AACrGhB,YAAQiB,GAAR,CAAY,4CAAZ,EAA0D5B,cAAcK,OAAd,CAAsBqB,IAAhF,EAAsFV,IAAIa,GAAJ,CAAQ,KAAR,CAAtF;AACD,GAFsB,CAAvB;AAGD;;AAED,CAAC,GAAGpC,eAAeY,OAAnB,EAA4BkB,WAA5B;;AAEA;AACAO,UAAUC,OAAOD,OAAP,GAAiBd,GAA3B;AACA","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nvar _setImmediate2 = require('babel-runtime/core-js/set-immediate');\n\nvar _setImmediate3 = _interopRequireDefault(_setImmediate2);\n\nvar _express = require('express');\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _mongoose = require('mongoose');\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nvar _environment = require('./config/environment');\n\nvar _environment2 = _interopRequireDefault(_environment);\n\nvar _http = require('http');\n\nvar _http2 = _interopRequireDefault(_http);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_mongoose2.default.Promise = require('bluebird');\n\n\n// Connect to MongoDB\n_mongoose2.default.connect('mongodb://simba:1994kingsss@ds135797.mlab.com:35797/mediaboxzim');\n_mongoose2.default.connection.on('error', function (err) {\n  console.error('MongoDB connection error: ' + err);\n  process.exit(-1);\n});\n\n// Populate databases with sample data\nif (_environment2.default.seedDB) {\n  require('./config/seed');\n}\n\n// Setup server\nvar app = (0, _express2.default)();\nvar server = _http2.default.createServer(app);\nvar socketio = require('socket.io')(server, {\n  serveClient: _environment2.default.env !== 'production',\n  path: '/socket.io-client'\n});\nrequire('./config/socketio').default(socketio);\nrequire('./config/express').default(app);\nrequire('./routes').default(app);\n\n// Start server\nfunction startServer() {\n  app.angularFullstack = server.listen(_environment2.default.port, _environment2.default.ip, function () {\n    console.log('Express server listening on %d, in %s mode', _environment2.default.port, app.get('env'));\n  });\n}\n\n(0, _setImmediate3.default)(startServer);\n\n// Expose app\nexports = module.exports = app;\n//# sourceMappingURL=app.js.map\n"]}